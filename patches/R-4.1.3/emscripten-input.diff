Index: R-4.1.3/src/main/main.c
===================================================================
--- R-4.1.3.orig/src/main/main.c
+++ R-4.1.3/src/main/main.c
@@ -1112,12 +1112,14 @@ static void end_Rmainloop(void)
 
 static void end_Rmainloop(void)
 {
+#ifndef __EMSCRIPTEN__
     /* refrain from printing trailing '\n' in no-echo mode */
     if (!R_NoEcho)
 	Rprintf("\n");
     /* run the .Last function. If it gives an error, will drop back to main
        loop. */
     R_CleanUp(SA_DEFAULT, 0, 1);
+#endif
 }
 
 void run_Rmainloop(void)
Index: R-4.1.3/src/unix/sys-std.c
===================================================================
--- R-4.1.3.orig/src/unix/sys-std.c
+++ R-4.1.3/src/unix/sys-std.c
@@ -61,6 +61,7 @@
 
 #ifdef __EMSCRIPTEN__
 #include <ctype.h>              /* for isspace */
+#include "Parse.h"
 #endif
 
 extern SA_TYPE SaveAction;
@@ -325,8 +326,17 @@ static void nop(void){}
 
 static void nop(void){}
 
+#ifdef __EMSCRIPTEN__
+#include <emscripten.h>
+static void handleEvents(void){
+	EM_ASM(globalThis.Module.webr.handleEvents());
+}
+void (* R_PolledEvents)(void) = handleEvents;
+int R_wait_usec = 100000;
+#else
 void (* R_PolledEvents)(void) = nop;
 int R_wait_usec = 0; /* 0 means no timeout */
+#endif
 
 /* For X11 devices */
 void (* Rg_PolledEvents)(void) = nop;
@@ -949,7 +959,6 @@ handleInterrupt(void)
 }
 #endif /* HAVE_LIBREADLINE */
 
-
 /* Fill a text buffer from stdin or with user typed console input. */
 static void *cd = NULL;
 
@@ -1030,8 +1039,12 @@ Rstd_ReadConsole(const char *prompt, unsigned char *bu
 	else
 #endif /* HAVE_LIBREADLINE */
 	{
+#ifdef __EMSCRIPTEN__
+        EM_ASM(globalThis.Module.setPrompt(UTF8ToString($0)), prompt);
+#else
 	    fputs(prompt, stdout);
 	    fflush(stdout);
+#endif
 	}
 
 	if(R_InputHandlers == NULL)
@@ -1089,10 +1102,24 @@ Rstd_ReadConsole(const char *prompt, unsigned char *bu
 		else
 #endif /* HAVE_LIBREADLINE */
 		{
+#ifdef __EMSCRIPTEN__
+		    static int initialised = 0;
+		    if (!initialised) {
+			EM_ASM(globalThis.Module.webr.resolveInit());
+			initialised = 1;
+		    }
+		    const char* input = (const char*) EM_ASM_INT(return globalThis.Module.webr.readConsole());
+
+		    strncpy((char*) buf, input, len);
+		    free((void*) input);
+
+		    return 1;
+#else
 		    if(fgets((char *)buf, len, stdin) == NULL)
 			return 0;
 		    else
 			return 1;
+#endif
 		}
 	    }
 	}
